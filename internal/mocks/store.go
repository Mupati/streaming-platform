// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/store.go
//
// Generated by this command:
//
//	mockgen -source internal/db/store.go -package mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	model "github.com/dionysia-dev/dionysia/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockInputStore is a mock of InputStore interface.
type MockInputStore struct {
	ctrl     *gomock.Controller
	recorder *MockInputStoreMockRecorder
}

// MockInputStoreMockRecorder is the mock recorder for MockInputStore.
type MockInputStoreMockRecorder struct {
	mock *MockInputStore
}

// NewMockInputStore creates a new mock instance.
func NewMockInputStore(ctrl *gomock.Controller) *MockInputStore {
	mock := &MockInputStore{ctrl: ctrl}
	mock.recorder = &MockInputStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInputStore) EXPECT() *MockInputStoreMockRecorder {
	return m.recorder
}

// CreateInput mocks base method.
func (m *MockInputStore) CreateInput(arg0 context.Context, arg1 *model.Input) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInput", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInput indicates an expected call of CreateInput.
func (mr *MockInputStoreMockRecorder) CreateInput(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInput", reflect.TypeOf((*MockInputStore)(nil).CreateInput), arg0, arg1)
}

// DeleteInput mocks base method.
func (m *MockInputStore) DeleteInput(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInput", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInput indicates an expected call of DeleteInput.
func (mr *MockInputStoreMockRecorder) DeleteInput(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInput", reflect.TypeOf((*MockInputStore)(nil).DeleteInput), arg0, arg1)
}

// GetInput mocks base method.
func (m *MockInputStore) GetInput(arg0 context.Context, arg1 uuid.UUID) (model.Input, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInput", arg0, arg1)
	ret0, _ := ret[0].(model.Input)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInput indicates an expected call of GetInput.
func (mr *MockInputStoreMockRecorder) GetInput(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInput", reflect.TypeOf((*MockInputStore)(nil).GetInput), arg0, arg1)
}
